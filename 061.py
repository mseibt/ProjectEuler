"""
Project Euler Problem 61
========================

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers
are all figurate (polygonal) numbers and are generated by the following
formulae:

Triangle     P[3,n]=n(n+1)/2    1, 3, 6, 10, 15, ...
Square       P[4,n]=n^2         1, 4, 9, 16, 25, ...
Pentagonal   P[5,n]=n(3n-1)/2   1, 5, 12, 22, 35, ...
Hexagonal    P[6,n]=n(2n-1)     1, 6, 15, 28, 45, ...
Heptagonal   P[7,n]=n(5n-3)/2   1, 7, 18, 34, 55, ...
Octagonal    P[8,n]=n(3n-2)     1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
interesting properties.

 1. The set is cyclic, in that the last two digits of each number is the
    first two digits of the next number (including the last number with
    the first).
 2. Each polygonal type: triangle (P[3,127]=8128), square (P[4,91]=8281),
    and pentagonal (P[5,44]=2882), is represented by a different number in
    the set.
 3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for
which each polygonal type: triangle, square, pentagonal, hexagonal,
heptagonal, and octagonal, is represented by a different number in the
set.
"""

from __future__ import division

# find range of indices for each polygonal type:
# triangle: 1000(0) = n(n+1) / 2 -> 0 = n**2 + n - 2000(0) -> 45 to 140
# square: 1000(0) = n**2 -> 32 to 99
# pentagonal: 1000(0) = n(3n-1)/2 -> 0 = 3n**2 - n - 2000(0) -> 26 to 81
# hexagonal: 1000(0) = n(2n-1) -> 0 = 2n**2 - n - 1000(0) -> 23 to 70
# heptagonal: 1000(0) = n(5n-3)/2 -> 0 = 5n**2 -3n - 2000(0) -> 21 to 63
# octagonal: 1000(0) = n(3n-2) -> 0 = 3n**2 - 2n - 1000(0) -> 19 to 58

polygonals = [
    [n*(n+1) // 2 for n in range(45, 141)],
    [n*n for n in range(32, 100)],
    [n*(3*n-1) // 2 for n in range(26, 82)],
    [n*(2*n-1) for n in range(23, 71)],
    [n*(5*n-3) // 2 for n in range(21, 64)],
    [n*(3*n-2) for n in range(19, 59)],
]

# Mark the 10^0 and 10^1 numbers which don't occur
numbers = [False] * 100
for polygon in polygonals:
    for i in polygon:
        numbers[i % 100] = True

# if the 10^1 number is 0, there is no cyclic 4 digit set
# since then the 10^4 number would have to be 0 -> the number would be 3 digit
# remove these numbers
# also remove all numbers where 10^4 and 10^3 match the marked numbers
for i in range(len(polygonals)):
    tmp = []
    for polygonal in polygonals[i]:
        if (polygonal // 10) % 10 and numbers[polygonal // 100]:
            tmp.append(polygonal)
    polygonals[i] = tmp

def cycle(lists, start, end, numbers):
    if len(lists) == 1 and start*100 + end in lists[0]:
        numbers.append(start*100 + end)
        print(sum(numbers))

    for polygon_numbers in lists:
        for number in polygon_numbers:
            if number // 100 == start:
                tmp = lists[:]
                tmp.remove(polygon_numbers)
                cycle(tmp, number % 100, end, numbers + [number])

for i in polygonals[0]:
    cycle(polygonals[1:], i % 100, i // 100, [i])
