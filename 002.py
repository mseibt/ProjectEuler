"""
Project Euler Problem 2
=======================

Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms will be:

                  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

Find the sum of all the even-valued terms in the sequence which do not
exceed four million.
"""

from Euler import fibonacci_n, fibonacci_limit


# Building up the Fibonacci sequence. If the element is divisible by 2
# add it to the sum
def e002a():
    s, i, j = 0, 1, 2
    while j < 4000000:
        if j % 2 == 0:
            s += j
        i, j = j, j + i
    return s


# if number is divisible by 2, the last bit is 0
# using the relationship to the golden ratio for generating the nth
# Fibonaccinumber. Limit to estimation via golden ratio relationship.
def e002b():
    return sum(filter(
        lambda x: not x & 1,
        [fibonacci_n(x) for x in range(34)])
    )


# Since the whole sequence is used, its more efficient to
# use the Fibonacci sequence generator
def e002c():
    return sum(filter(
        lambda x: not x & 1,
        fibonacci_limit(4000000)
    ))


# You also can exploit the fact, that every third element of the Fibonacci
# sequence is divisible by 2. See the Project Euler overview for more
# information.

# In the Project Euler Forum (page 5) there are even some O(1) solutions!

print(e002b())